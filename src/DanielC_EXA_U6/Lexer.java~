// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/DanielC_EXA_U6/javaExtendido.flex

/* --------------------------Usercode Section------------------------ */
package DanielC_EXA_U6;
import java_cup.runtime.*;
import java.util.ArrayList;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\11\25\1\26\1\27\1\30\1\31\1\32\2\0\22\33"+
    "\1\34\7\33\1\35\1\0\1\36\1\0\1\33\1\0"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\33\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\33\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\33\1\66\1\67\1\70\7\0\1\3\44\0"+
    "\1\71\12\0\1\71\4\0\1\71\5\0\27\71\1\0"+
    "\37\71\1\0\u01ca\71\4\0\14\71\16\0\5\71\7\0"+
    "\1\71\1\0\1\71\21\0\165\71\1\0\2\71\2\0"+
    "\4\71\1\0\1\71\6\0\1\71\1\0\3\71\1\0"+
    "\1\71\1\0\24\71\1\0\123\71\1\0\213\71\1\0"+
    "\255\71\1\0\46\71\2\0\1\71\6\0\51\71\10\0"+
    "\55\71\1\0\1\71\1\0\2\71\1\0\2\71\1\0"+
    "\1\71\10\0\33\71\4\0\4\71\35\0\13\71\5\0"+
    "\112\71\4\0\146\71\1\0\10\71\2\0\12\71\1\0"+
    "\23\71\2\0\1\71\20\0\73\71\2\0\145\71\16\0"+
    "\66\71\4\0\1\71\2\0\1\71\2\0\56\71\22\0"+
    "\34\71\4\0\13\71\65\0\25\71\1\0\10\71\25\0"+
    "\17\71\1\0\201\71\2\0\12\71\1\0\23\71\1\0"+
    "\10\71\2\0\2\71\2\0\26\71\1\0\7\71\1\0"+
    "\1\71\3\0\4\71\2\0\11\71\2\0\2\71\2\0"+
    "\4\71\10\0\1\71\4\0\2\71\1\0\5\71\2\0"+
    "\14\71\12\0\1\71\1\0\1\71\2\0\3\71\1\0"+
    "\6\71\4\0\2\71\2\0\26\71\1\0\7\71\1\0"+
    "\2\71\1\0\2\71\1\0\2\71\2\0\1\71\1\0"+
    "\5\71\4\0\2\71\2\0\3\71\3\0\1\71\7\0"+
    "\4\71\1\0\1\71\7\0\20\71\13\0\3\71\1\0"+
    "\11\71\1\0\3\71\1\0\26\71\1\0\7\71\1\0"+
    "\2\71\1\0\5\71\2\0\12\71\1\0\3\71\1\0"+
    "\3\71\2\0\1\71\17\0\4\71\2\0\12\71\11\0"+
    "\7\71\1\0\3\71\1\0\10\71\2\0\2\71\2\0"+
    "\26\71\1\0\7\71\1\0\2\71\1\0\5\71\2\0"+
    "\11\71\2\0\2\71\2\0\3\71\10\0\2\71\4\0"+
    "\2\71\1\0\5\71\2\0\12\71\1\0\1\71\20\0"+
    "\2\71\1\0\6\71\3\0\3\71\1\0\4\71\3\0"+
    "\2\71\1\0\1\71\1\0\2\71\3\0\2\71\3\0"+
    "\3\71\3\0\14\71\4\0\5\71\3\0\3\71\1\0"+
    "\4\71\2\0\1\71\6\0\1\71\16\0\12\71\20\0"+
    "\15\71\1\0\3\71\1\0\27\71\1\0\20\71\3\0"+
    "\10\71\1\0\3\71\1\0\4\71\7\0\2\71\1\0"+
    "\3\71\5\0\4\71\2\0\12\71\20\0\4\71\1\0"+
    "\10\71\1\0\3\71\1\0\27\71\1\0\12\71\1\0"+
    "\5\71\2\0\11\71\1\0\3\71\1\0\4\71\7\0"+
    "\2\71\7\0\1\71\1\0\4\71\2\0\12\71\1\0"+
    "\2\71\15\0\4\71\1\0\10\71\1\0\3\71\1\0"+
    "\63\71\1\0\3\71\1\0\5\71\5\0\4\71\7\0"+
    "\5\71\2\0\12\71\12\0\6\71\2\0\2\71\1\0"+
    "\22\71\3\0\30\71\1\0\11\71\1\0\1\71\2\0"+
    "\7\71\3\0\1\71\4\0\6\71\1\0\1\71\1\0"+
    "\10\71\6\0\12\71\2\0\2\71\15\0\72\71\5\0"+
    "\17\71\1\0\12\71\47\0\2\71\1\0\1\71\1\0"+
    "\5\71\1\0\30\71\1\0\1\71\1\0\27\71\2\0"+
    "\5\71\1\0\1\71\1\0\6\71\2\0\12\71\2\0"+
    "\4\71\40\0\1\71\27\0\2\71\6\0\12\71\13\0"+
    "\1\71\1\0\1\71\1\0\1\71\4\0\12\71\1\0"+
    "\44\71\4\0\24\71\1\0\22\71\1\0\44\71\11\0"+
    "\1\71\71\0\112\71\6\0\116\71\2\0\46\71\1\0"+
    "\1\71\5\0\1\71\2\0\53\71\1\0\115\71\1\0"+
    "\4\71\2\0\7\71\1\0\1\71\1\0\4\71\2\0"+
    "\51\71\1\0\4\71\2\0\41\71\1\0\4\71\2\0"+
    "\7\71\1\0\1\71\1\0\4\71\2\0\17\71\1\0"+
    "\71\71\1\0\4\71\2\0\103\71\2\0\3\71\40\0"+
    "\20\71\20\0\126\71\2\0\6\71\3\0\u016c\71\2\0"+
    "\21\71\1\0\32\71\5\0\113\71\3\0\13\71\7\0"+
    "\15\71\1\0\7\71\13\0\25\71\13\0\24\71\14\0"+
    "\15\71\1\0\3\71\1\0\2\71\14\0\124\71\3\0"+
    "\1\71\4\0\2\71\2\0\12\71\41\0\3\71\2\0"+
    "\12\71\6\0\131\71\7\0\53\71\5\0\106\71\12\0"+
    "\37\71\1\0\14\71\4\0\14\71\12\0\50\71\2\0"+
    "\5\71\13\0\54\71\4\0\32\71\6\0\12\71\46\0"+
    "\34\71\4\0\77\71\1\0\35\71\2\0\13\71\6\0"+
    "\12\71\15\0\1\71\10\0\17\71\101\0\114\71\4\0"+
    "\12\71\21\0\11\71\14\0\164\71\14\0\70\71\10\0"+
    "\12\71\3\0\61\71\2\0\11\71\7\0\53\71\2\0"+
    "\3\71\20\0\3\71\1\0\47\71\5\0\372\71\1\0"+
    "\33\71\2\0\6\71\2\0\46\71\2\0\6\71\2\0"+
    "\10\71\1\0\1\71\1\0\1\71\1\0\1\71\1\0"+
    "\37\71\2\0\65\71\1\0\7\71\1\0\1\71\3\0"+
    "\3\71\1\0\7\71\3\0\4\71\2\0\6\71\4\0"+
    "\15\71\5\0\3\71\1\0\7\71\53\0\2\3\25\0"+
    "\2\71\23\0\1\71\34\0\1\71\15\0\1\71\20\0"+
    "\15\71\63\0\41\71\21\0\1\71\4\0\1\71\2\0"+
    "\12\71\1\0\1\71\3\0\5\71\6\0\1\71\1\0"+
    "\1\71\1\0\1\71\1\0\4\71\1\0\13\71\2\0"+
    "\4\71\5\0\5\71\4\0\1\71\21\0\51\71\u022d\0"+
    "\64\71\26\0\57\71\1\0\57\71\1\0\205\71\6\0"+
    "\11\71\14\0\46\71\1\0\1\71\5\0\1\71\2\0"+
    "\70\71\7\0\1\71\17\0\30\71\11\0\7\71\1\0"+
    "\7\71\1\0\7\71\1\0\7\71\1\0\7\71\1\0"+
    "\7\71\1\0\7\71\1\0\7\71\1\0\40\71\57\0"+
    "\1\71\325\0\3\71\31\0\17\71\1\0\5\71\2\0"+
    "\5\71\4\0\126\71\2\0\2\71\2\0\3\71\1\0"+
    "\132\71\1\0\4\71\5\0\53\71\1\0\136\71\21\0"+
    "\33\71\65\0\306\71\112\0\360\71\20\0\215\71\103\0"+
    "\56\71\2\0\15\71\3\0\34\71\24\0\63\71\1\0"+
    "\12\71\1\0\163\71\45\0\11\71\2\0\147\71\2\0"+
    "\65\71\2\0\5\71\60\0\61\71\30\0\64\71\14\0"+
    "\106\71\12\0\12\71\6\0\30\71\3\0\1\71\1\0"+
    "\61\71\2\0\44\71\14\0\35\71\3\0\101\71\16\0"+
    "\13\71\6\0\37\71\1\0\67\71\11\0\16\71\2\0"+
    "\12\71\6\0\27\71\3\0\111\71\30\0\3\71\2\0"+
    "\20\71\2\0\5\71\12\0\6\71\2\0\6\71\2\0"+
    "\6\71\11\0\7\71\1\0\7\71\1\0\53\71\1\0"+
    "\14\71\10\0\173\71\1\0\2\71\2\0\12\71\6\0"+
    "\244\71\14\0\27\71\4\0\61\71\4\0\u0100\3\156\71"+
    "\2\0\152\71\46\0\7\71\14\0\5\71\5\0\14\71"+
    "\1\0\15\71\1\0\5\71\1\0\1\71\1\0\2\71"+
    "\1\0\2\71\1\0\154\71\41\0\153\71\22\0\100\71"+
    "\2\0\66\71\50\0\14\71\4\0\20\71\20\0\20\71"+
    "\3\0\2\71\30\0\3\71\40\0\5\71\1\0\207\71"+
    "\23\0\12\71\7\0\32\71\4\0\1\71\1\0\32\71"+
    "\13\0\131\71\3\0\6\71\2\0\6\71\2\0\6\71"+
    "\2\0\3\71\43\0\14\71\1\0\32\71\1\0\23\71"+
    "\1\0\2\71\1\0\17\71\2\0\16\71\42\0\173\71"+
    "\105\0\65\71\210\0\1\71\202\0\35\71\3\0\61\71"+
    "\17\0\1\71\37\0\40\71\15\0\36\71\5\0\53\71"+
    "\5\0\36\71\2\0\44\71\4\0\10\71\1\0\5\71"+
    "\52\0\236\71\2\0\12\71\6\0\44\71\4\0\44\71"+
    "\4\0\50\71\10\0\64\71\234\0\67\71\11\0\26\71"+
    "\12\0\10\71\230\0\6\71\2\0\1\71\1\0\54\71"+
    "\1\0\2\71\3\0\1\71\2\0\27\71\12\0\27\71"+
    "\11\0\37\71\101\0\23\71\1\0\2\71\12\0\26\71"+
    "\12\0\32\71\106\0\70\71\6\0\2\71\100\0\4\71"+
    "\1\0\2\71\5\0\10\71\1\0\3\71\1\0\35\71"+
    "\2\0\3\71\4\0\1\71\40\0\35\71\3\0\35\71"+
    "\43\0\10\71\1\0\36\71\31\0\66\71\12\0\26\71"+
    "\12\0\23\71\15\0\22\71\156\0\111\71\67\0\63\71"+
    "\15\0\63\71\15\0\50\71\10\0\12\71\306\0\35\71"+
    "\12\0\1\71\10\0\41\71\217\0\27\71\11\0\107\71"+
    "\37\0\12\71\17\0\74\71\25\0\31\71\7\0\12\71"+
    "\6\0\65\71\1\0\12\71\4\0\3\71\11\0\44\71"+
    "\2\0\1\71\11\0\105\71\4\0\4\71\3\0\13\71"+
    "\1\0\1\71\43\0\22\71\1\0\45\71\6\0\1\71"+
    "\101\0\7\71\1\0\1\71\1\0\4\71\1\0\17\71"+
    "\1\0\12\71\7\0\73\71\5\0\12\71\6\0\4\71"+
    "\1\0\10\71\2\0\2\71\2\0\26\71\1\0\7\71"+
    "\1\0\2\71\1\0\5\71\1\0\12\71\2\0\2\71"+
    "\2\0\3\71\2\0\1\71\6\0\1\71\5\0\7\71"+
    "\2\0\7\71\3\0\5\71\213\0\113\71\5\0\12\71"+
    "\4\0\2\71\40\0\106\71\1\0\1\71\10\0\12\71"+
    "\246\0\66\71\2\0\11\71\27\0\6\71\42\0\101\71"+
    "\3\0\1\71\13\0\12\71\46\0\71\71\7\0\12\71"+
    "\66\0\33\71\2\0\17\71\4\0\12\71\306\0\73\71"+
    "\145\0\112\71\25\0\1\71\240\0\10\71\2\0\56\71"+
    "\2\0\10\71\1\0\2\71\33\0\77\71\10\0\1\71"+
    "\10\0\112\71\3\0\1\71\42\0\71\71\7\0\11\71"+
    "\1\0\55\71\1\0\11\71\17\0\12\71\30\0\36\71"+
    "\2\0\26\71\1\0\16\71\111\0\7\71\1\0\2\71"+
    "\1\0\54\71\3\0\1\71\1\0\2\71\1\0\11\71"+
    "\10\0\12\71\6\0\6\71\1\0\2\71\1\0\45\71"+
    "\1\0\2\71\1\0\6\71\7\0\12\71\u0136\0\27\71"+
    "\11\0\232\71\146\0\157\71\21\0\304\71\274\0\57\71"+
    "\321\0\107\71\271\0\71\71\7\0\37\71\1\0\12\71"+
    "\146\0\36\71\2\0\5\71\13\0\67\71\11\0\4\71"+
    "\14\0\12\71\11\0\25\71\5\0\23\71\260\0\100\71"+
    "\200\0\113\71\4\0\71\71\7\0\21\71\100\0\2\71"+
    "\1\0\1\71\34\0\370\71\10\0\363\71\15\0\37\71"+
    "\61\0\3\71\21\0\4\71\10\0\u018c\71\4\0\153\71"+
    "\5\0\15\71\3\0\11\71\7\0\12\71\3\0\2\71"+
    "\306\0\5\71\3\0\6\71\10\0\10\71\2\0\7\71"+
    "\36\0\4\71\224\0\3\71\273\0\125\71\1\0\107\71"+
    "\1\0\2\71\2\0\1\71\2\0\2\71\2\0\4\71"+
    "\1\0\14\71\1\0\1\71\1\0\7\71\1\0\101\71"+
    "\1\0\4\71\2\0\10\71\1\0\7\71\1\0\34\71"+
    "\1\0\4\71\1\0\5\71\1\0\1\71\3\0\7\71"+
    "\1\0\u0154\71\2\0\31\71\1\0\31\71\1\0\37\71"+
    "\1\0\31\71\1\0\37\71\1\0\31\71\1\0\37\71"+
    "\1\0\31\71\1\0\37\71\1\0\31\71\1\0\10\71"+
    "\2\0\151\71\4\0\62\71\10\0\1\71\16\0\1\71"+
    "\26\0\5\71\1\0\17\71\120\0\7\71\1\0\21\71"+
    "\2\0\7\71\1\0\2\71\1\0\5\71\325\0\55\71"+
    "\3\0\16\71\2\0\12\71\4\0\1\71\u0171\0\72\71"+
    "\6\0\305\71\13\0\7\71\51\0\114\71\4\0\12\71"+
    "\246\0\4\71\1\0\33\71\1\0\2\71\1\0\1\71"+
    "\2\0\1\71\1\0\12\71\1\0\4\71\1\0\1\71"+
    "\1\0\1\71\6\0\1\71\4\0\1\71\1\0\1\71"+
    "\1\0\1\71\1\0\3\71\1\0\2\71\1\0\1\71"+
    "\2\0\1\71\1\0\1\71\1\0\1\71\1\0\1\71"+
    "\1\0\1\71\1\0\2\71\1\0\1\71\2\0\4\71"+
    "\1\0\7\71\1\0\4\71\1\0\4\71\1\0\1\71"+
    "\1\0\12\71\1\0\21\71\5\0\3\71\1\0\5\71"+
    "\1\0\21\71\164\0\32\71\6\0\32\71\6\0\32\71"+
    "\166\0\327\71\51\0\65\71\13\0\336\71\2\0\u0182\71"+
    "\16\0\u0131\71\37\0\36\71\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\4"+
    "\1\26\1\27\17\4\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\1\36\1\37\1\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\2\0\1\46\2\0\1\47\1\50"+
    "\1\51\12\4\1\52\6\4\1\53\20\4\1\54\1\55"+
    "\1\0\2\56\1\0\21\4\1\57\1\4\1\60\1\4"+
    "\1\61\13\4\1\62\2\4\1\63\4\4\1\64\1\65"+
    "\1\4\1\66\5\4\1\67\6\4\1\70\1\71\11\4"+
    "\1\72\1\73\4\4\1\74\1\75\1\76\1\77\5\4"+
    "\1\100\1\101\1\102\7\4\1\103\3\4\1\104\1\105"+
    "\4\4\1\106\1\107\3\4\1\110\3\4\1\111\1\112"+
    "\1\113\1\114\1\115\1\4\1\116\1\4\1\117\1\120"+
    "\1\121\1\4\1\122\1\123\1\4\1\124\1\125\3\4"+
    "\1\126\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\72\0\72\0\u020a\0\u0244\0\72\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\72\0\72\0\u03a0\0\u03da"+
    "\0\u0414\0\u044e\0\72\0\72\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\72\0\u07ee\0\72\0\72\0\350"+
    "\0\350\0\72\0\72\0\72\0\u0828\0\72\0\72\0\72"+
    "\0\72\0\72\0\u0862\0\u089c\0\u08d6\0\72\0\u0910\0\u032c"+
    "\0\72\0\72\0\72\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0122\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\72\0\72\0\u10c4"+
    "\0\72\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u0122\0\u154c\0\u0122\0\u1586"+
    "\0\u0122\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u0122\0\u183e\0\u1878\0\72"+
    "\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u0122\0\u0122\0\u199a\0\u0122"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u0122\0\u0122\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u0122"+
    "\0\u0122\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u0122\0\u0122\0\u0122"+
    "\0\u0122\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u0122\0\u20a0"+
    "\0\u0122\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u0122\0\u2270\0\u22aa\0\u22e4\0\u0122\0\u0122\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u0122\0\u0122\0\u2406\0\u2440\0\u247a\0\u0122"+
    "\0\u24b4\0\u24ee\0\u2528\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122"+
    "\0\u2562\0\u0122\0\u259c\0\u0122\0\u0122\0\u0122\0\u25d6\0\u0122"+
    "\0\u0122\0\u2610\0\u0122\0\u0122\0\u264a\0\u2684\0\u26be\0\u0122"+
    "\0\u0122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\7\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\2\7\1\43\1\7\1\44"+
    "\1\7\1\45\1\7\1\46\1\47\1\50\1\51\1\7"+
    "\1\52\1\53\2\7\1\54\1\55\1\56\1\2\74\0"+
    "\1\3\120\0\1\57\40\0\2\60\4\0\1\60\1\61"+
    "\62\60\10\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\27\7\35\0\1\62\52\0\1\63\72\0\1\64\10\0"+
    "\2\65\5\0\2\65\2\0\27\65\3\0\1\65\31\0"+
    "\1\66\57\0\1\67\11\0\1\70\61\0\1\71\7\0"+
    "\1\72\62\0\1\73\65\0\1\74\4\0\1\75\5\0"+
    "\1\76\62\0\1\77\1\0\2\100\66\0\1\77\1\0"+
    "\2\24\75\0\1\101\71\0\1\102\71\0\1\103\50\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\21\7\1\104"+
    "\5\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\1\7\1\105\25\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\15\7\1\106\1\7\1\107\6\7\1\110"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\1\111"+
    "\6\7\1\112\2\7\1\113\2\7\1\114\11\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\4\7\1\115"+
    "\10\7\1\116\11\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\12\7\1\117\12\7\1\120\1\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\1\121\7\7"+
    "\1\122\1\7\1\123\2\7\1\124\11\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\5\7\1\125\5\7"+
    "\1\126\1\127\12\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\15\7\1\130\11\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\4\7\1\131\15\7\1\132"+
    "\4\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\1\133\16\7\1\134\2\7\1\135\4\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\4\7\1\136\22\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\7\7"+
    "\1\137\11\7\1\140\2\7\1\141\2\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\7\7\1\142\7\7"+
    "\1\143\7\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\15\7\1\144\11\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\7\7\1\145\17\7\73\0\1\146"+
    "\15\0\1\64\100\0\1\147\47\0\16\74\1\150\53\74"+
    "\2\75\1\151\2\0\1\152\64\75\24\0\2\153\54\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\17\7\1\154"+
    "\7\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\20\7\1\155\6\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\15\7\1\156\11\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\4\7\1\157\22\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\21\7\1\160"+
    "\5\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\20\7\1\161\1\162\5\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\1\163\26\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\1\164\26\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\14\7\1\165\12\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\5\7"+
    "\1\166\21\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\22\7\1\167\4\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\20\7\1\170\6\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\21\7\1\171\5\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\12\7"+
    "\1\172\14\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\14\7\1\173\12\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\15\7\1\174\11\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\17\7\1\175\7\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\16\7"+
    "\1\176\10\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\21\7\1\177\5\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\14\7\1\200\12\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\24\7\1\201\2\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\12\7"+
    "\1\202\14\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\2\7\1\203\24\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\10\7\1\204\4\7\1\205\11\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\1\7"+
    "\1\206\25\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\21\7\1\207\5\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\15\7\1\210\11\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\1\211\26\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\10\7\1\212"+
    "\16\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\17\7\1\213\7\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\22\7\1\214\3\7\1\215\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\10\7\1\216\16\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\10\7"+
    "\1\217\16\7\4\0\23\74\1\151\46\74\2\0\1\151"+
    "\113\0\2\153\14\0\1\220\37\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\10\7\1\221\16\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\21\7\1\222\5\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\12\7"+
    "\1\223\14\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\1\224\26\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\4\7\1\225\22\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\4\7\1\226\22\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\2\7\1\227"+
    "\24\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\17\7\1\230\7\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\20\7\1\231\6\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\20\7\1\232\1\233\5\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\1\234"+
    "\26\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\1\7\1\235\25\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\4\7\1\236\22\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\4\7\1\237\22\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\20\7\1\240"+
    "\6\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\1\241\26\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\1\242\26\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\12\7\1\243\2\7\1\244\11\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\6\7\1\245"+
    "\20\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\12\7\1\246\14\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\11\7\1\247\15\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\23\7\1\250\3\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\21\7\1\251"+
    "\5\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\12\7\1\252\14\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\22\7\1\253\4\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\17\7\1\254\7\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\21\7\1\255"+
    "\5\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\21\7\1\256\5\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\15\7\1\257\11\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\4\7\1\260\22\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\3\7\1\261"+
    "\23\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\12\7\1\262\14\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\14\7\1\263\12\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\17\7\1\264\7\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\4\7\1\265"+
    "\22\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\11\7\1\266\15\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\7\7\1\267\17\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\20\7\1\270\6\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\21\7\1\271"+
    "\5\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\10\7\1\272\16\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\22\7\1\273\4\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\12\7\1\274\14\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\10\7\1\275"+
    "\16\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\14\7\1\276\12\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\4\7\1\277\22\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\12\7\1\300\14\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\21\7\1\301"+
    "\5\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\4\7\1\302\22\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\17\7\1\303\7\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\1\304\26\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\1\305\26\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\4\7\1\306"+
    "\22\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\10\7\1\307\16\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\17\7\1\310\7\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\21\7\1\311\5\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\10\7\1\312"+
    "\16\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\2\7\1\313\24\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\24\7\1\314\2\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\4\7\1\315\22\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\6\7\1\316"+
    "\20\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\1\317\26\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\1\320\26\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\14\7\1\321\12\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\12\7\1\322\14\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\4\7\1\323"+
    "\22\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\5\7\1\324\21\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\3\7\1\325\23\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\12\7\1\326\14\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\13\7\1\327"+
    "\13\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\21\7\1\330\5\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\6\7\1\331\20\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\21\7\1\332\5\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\2\7\1\333"+
    "\24\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\2\7\1\334\24\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\14\7\1\335\12\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\2\7\1\336\24\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\7\7\1\337"+
    "\17\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\20\7\1\340\6\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\2\7\1\341\24\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\14\7\1\342\12\7\14\0"+
    "\1\7\13\0\2\7\5\0\2\7\2\0\22\7\1\343"+
    "\4\7\14\0\1\7\13\0\2\7\5\0\2\7\2\0"+
    "\21\7\1\344\5\7\14\0\1\7\13\0\2\7\5\0"+
    "\2\7\2\0\20\7\1\345\6\7\14\0\1\7\13\0"+
    "\2\7\5\0\2\7\2\0\26\7\1\346\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\4\7\1\347\22\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\4\7"+
    "\1\350\22\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\4\7\1\351\22\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\21\7\1\352\5\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\21\7\1\353\5\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\4\7"+
    "\1\354\22\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\14\7\1\355\12\7\14\0\1\7\13\0\2\7"+
    "\5\0\2\7\2\0\4\7\1\356\22\7\14\0\1\7"+
    "\13\0\2\7\5\0\2\7\2\0\21\7\1\357\5\7"+
    "\14\0\1\7\13\0\2\7\5\0\2\7\2\0\3\7"+
    "\1\360\23\7\14\0\1\7\13\0\2\7\5\0\2\7"+
    "\2\0\20\7\1\361\6\7\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9976];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\2\11\2\1\1\11\5\1\2\11"+
    "\4\1\2\11\17\1\1\11\1\1\2\11\1\0\1\1"+
    "\3\11\1\0\5\11\1\1\2\0\1\11\2\0\3\11"+
    "\42\1\2\11\1\0\1\11\1\1\1\0\44\1\1\11"+
    "\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    static String error = null;
    public ArrayList<Elemento> elementos = new ArrayList<>();
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
    public int getyyline(){
        return yyline;
    }
    public int getyycolumn(){
        return yycolumn;
    }
    public void agregaElemento(String token, String lexema){
        elementos.add(new Elemento(token, lexema));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Exception(String.format("Error léxico\nCaracter inválido <"+yytext()+"> en linea %d, columna %d", (yyline+1), (yycolumn+1)));
            }
            // fall through
          case 88: break;
          case 2:
            { /*Sólo ignorar*/
            }
            // fall through
          case 89: break;
          case 3:
            { agregaElemento("CMD", yytext()); return symbol(sym.CMD);
            }
            // fall through
          case 90: break;
          case 4:
            { agregaElemento("ID", yytext()); return symbol(sym.ID, yytext());
            }
            // fall through
          case 91: break;
          case 5:
            { agregaElemento("OP_MOD", yytext()); return symbol(sym.OP_MOD);
            }
            // fall through
          case 92: break;
          case 6:
            { agregaElemento("OPL_ANDSIMP", yytext()); return symbol(sym.OPL_ANDSIMP);
            }
            // fall through
          case 93: break;
          case 7:
            { agregaElemento("CMS", yytext()); return symbol(sym.CMS);
            }
            // fall through
          case 94: break;
          case 8:
            { agregaElemento("AG_PA", yytext()); return symbol(sym.AG_PA);
            }
            // fall through
          case 95: break;
          case 9:
            { agregaElemento("AG_PC", yytext()); return symbol(sym.AG_PC);
            }
            // fall through
          case 96: break;
          case 10:
            { agregaElemento("OP_MUL", yytext()); return symbol(sym.OP_MUL);
            }
            // fall through
          case 97: break;
          case 11:
            { agregaElemento("OP_SUM", yytext()); return symbol(sym.OP_SUM);
            }
            // fall through
          case 98: break;
          case 12:
            { agregaElemento("CM", yytext()); return symbol(sym.CM);
            }
            // fall through
          case 99: break;
          case 13:
            { agregaElemento("OP_RES", yytext()); return symbol(sym.OP_RES);
            }
            // fall through
          case 100: break;
          case 14:
            { agregaElemento("UPT", yytext()); return symbol(sym.UPT);
            }
            // fall through
          case 101: break;
          case 15:
            { agregaElemento("OP_DIV", yytext()); return symbol(sym.OP_DIV);
            }
            // fall through
          case 102: break;
          case 16:
            { agregaElemento("VN", yytext()); return symbol(sym.VN);
            }
            // fall through
          case 103: break;
          case 17:
            { agregaElemento("DP", yytext()); return symbol(sym.DP);
            }
            // fall through
          case 104: break;
          case 18:
            { agregaElemento("CE", yytext()); return symbol(sym.CE);
            }
            // fall through
          case 105: break;
          case 19:
            { agregaElemento("OPR_MEN", yytext()); return symbol(sym.OPR_MEN);
            }
            // fall through
          case 106: break;
          case 20:
            { agregaElemento("OP_ASIG", yytext()); return symbol(sym.OP_ASIG);
            }
            // fall through
          case 107: break;
          case 21:
            { agregaElemento("OPR_MAY", yytext()); return symbol(sym.OPR_MAY);
            }
            // fall through
          case 108: break;
          case 22:
            { agregaElemento("AG_CA", yytext()); return symbol(sym.AG_CA);
            }
            // fall through
          case 109: break;
          case 23:
            { agregaElemento("AG_CC", yytext()); return symbol(sym.AG_CC);
            }
            // fall through
          case 110: break;
          case 24:
            { agregaElemento("AG_LLA", yytext()); return symbol(sym.AG_LLA);
            }
            // fall through
          case 111: break;
          case 25:
            { agregaElemento("OPL_ORSIMP", yytext()); return symbol(sym.OPL_ORSIMP);
            }
            // fall through
          case 112: break;
          case 26:
            { agregaElemento("AG_LLC", yytext()); return symbol(sym.AG_LLC);
            }
            // fall through
          case 113: break;
          case 27:
            { agregaElemento("OPR_DIF", yytext()); return symbol(sym.OPR_DIF);
            }
            // fall through
          case 114: break;
          case 28:
            { agregaElemento("VS", yytext()); return symbol(sym.VS);
            }
            // fall through
          case 115: break;
          case 29:
            { agregaElemento("OP_MODASIG", yytext()); return symbol(sym.OP_MODASIG);
            }
            // fall through
          case 116: break;
          case 30:
            { agregaElemento("OPL_AND", yytext()); return symbol(sym.OPL_AND);
            }
            // fall through
          case 117: break;
          case 31:
            { agregaElemento("VC", yytext()); return symbol(sym.VC);
            }
            // fall through
          case 118: break;
          case 32:
            { agregaElemento(" OP_MULASIG", yytext()); return symbol(sym. OP_MULASIG);
            }
            // fall through
          case 119: break;
          case 33:
            { agregaElemento("OPU_INC", yytext()); return symbol(sym.OPU_INC);
            }
            // fall through
          case 120: break;
          case 34:
            { agregaElemento("OP_SUMASIG", yytext()); return symbol(sym.OP_SUMASIG);
            }
            // fall through
          case 121: break;
          case 35:
            { agregaElemento("OPU_DEC", yytext()); return symbol(sym.OPU_DEC);
            }
            // fall through
          case 122: break;
          case 36:
            { agregaElemento("OP_RESASIG", yytext()); return symbol(sym.OP_RESASIG);
            }
            // fall through
          case 123: break;
          case 37:
            { agregaElemento("DPT", yytext()); return symbol(sym.DPT);
            }
            // fall through
          case 124: break;
          case 38:
            { agregaElemento("OP_DIVASIG", yytext()); return symbol(sym.OP_DIVASIG);
            }
            // fall through
          case 125: break;
          case 39:
            { agregaElemento("OPR_MENIG", yytext()); return symbol(sym.OPR_MENIG);
            }
            // fall through
          case 126: break;
          case 40:
            { agregaElemento("OPR_IG", yytext()); return symbol(sym.OPR_IG);
            }
            // fall through
          case 127: break;
          case 41:
            { agregaElemento("OPR_MAYIG", yytext()); return symbol(sym.OPR_MAYIG);
            }
            // fall through
          case 128: break;
          case 42:
            { agregaElemento("P_DO", yytext()); return symbol(sym.P_DO);
            }
            // fall through
          case 129: break;
          case 43:
            { agregaElemento("P_IF", yytext()); return symbol(sym.P_IF, yytext());
            }
            // fall through
          case 130: break;
          case 44:
            { agregaElemento("OPL_OR", yytext()); return symbol(sym.OPL_OR);
            }
            // fall through
          case 131: break;
          case 45:
            { agregaElemento("TPT", yytext()); return symbol(sym.TPT);
            }
            // fall through
          case 132: break;
          case 46:
            { agregaElemento("COMENT ", yytext()); return symbol(sym.COMENT, yytext().replace("\n",""));
            }
            // fall through
          case 133: break;
          case 47:
            { agregaElemento("P_FOR", yytext()); return symbol(sym.P_FOR);
            }
            // fall through
          case 134: break;
          case 48:
            { agregaElemento("P_INT", yytext()); return symbol(sym.P_INT);
            }
            // fall through
          case 135: break;
          case 49:
            { agregaElemento("P_NEW", yytext()); return symbol(sym.P_NEW);
            }
            // fall through
          case 136: break;
          case 50:
            { agregaElemento("P_TRY", yytext()); return symbol(sym.P_TRY);
            }
            // fall through
          case 137: break;
          case 51:
            { agregaElemento("VD", yytext()); return symbol(sym.VD);
            }
            // fall through
          case 138: break;
          case 52:
            { agregaElemento("P_BYTE", yytext()); return symbol(sym.P_BYTE);
            }
            // fall through
          case 139: break;
          case 53:
            { agregaElemento("P_CASE", yytext()); return symbol(sym.P_CASE);
            }
            // fall through
          case 140: break;
          case 54:
            { agregaElemento("P_CHAR", yytext()); return symbol(sym.P_CHAR);
            }
            // fall through
          case 141: break;
          case 55:
            { agregaElemento("P_ELSE", yytext()); return symbol(sym.P_ELSE);
            }
            // fall through
          case 142: break;
          case 56:
            { agregaElemento("P_LONG", yytext()); return symbol(sym.P_LONG);
            }
            // fall through
          case 143: break;
          case 57:
            { agregaElemento("P_NULL", yytext()); return symbol(sym.P_NULL);
            }
            // fall through
          case 144: break;
          case 58:
            { agregaElemento("P_TRUE", yytext()); return symbol(sym.P_TRUE);
            }
            // fall through
          case 145: break;
          case 59:
            { agregaElemento("P_VOID", yytext()); return symbol(sym.P_VOID);
            }
            // fall through
          case 146: break;
          case 60:
            { agregaElemento("P_BREAK", yytext()); return symbol(sym.P_BREAK);
            }
            // fall through
          case 147: break;
          case 61:
            { agregaElemento("P_CATCH", yytext()); return symbol(sym.P_CATCH);
            }
            // fall through
          case 148: break;
          case 62:
            { agregaElemento("P_CLASS", yytext()); return symbol(sym.P_CLASS);
            }
            // fall through
          case 149: break;
          case 63:
            { agregaElemento("P_CONST", yytext()); return symbol(sym.P_CONST);
            }
            // fall through
          case 150: break;
          case 64:
            { agregaElemento("P_FALSE", yytext()); return symbol(sym.P_FALSE);
            }
            // fall through
          case 151: break;
          case 65:
            { agregaElemento("P_FINAL", yytext()); return symbol(sym.P_FINAL);
            }
            // fall through
          case 152: break;
          case 66:
            { agregaElemento("P_FLOAT ", yytext()); return symbol(sym.P_FLOAT );
            }
            // fall through
          case 153: break;
          case 67:
            { agregaElemento("P_SHORT", yytext()); return symbol(sym.P_SHORT);
            }
            // fall through
          case 154: break;
          case 68:
            { agregaElemento("P_WHILE", yytext()); return symbol(sym.P_WHILE);
            }
            // fall through
          case 155: break;
          case 69:
            { agregaElemento("P_STRING", yytext()); return symbol(sym.P_STRING);
            }
            // fall through
          case 156: break;
          case 70:
            { agregaElemento("P_DOUBLE", yytext()); return symbol(sym.P_DOUBLE);
            }
            // fall through
          case 157: break;
          case 71:
            { agregaElemento("P_ELSEIF", yytext()); return symbol(sym.P_ELSEIF);
            }
            // fall through
          case 158: break;
          case 72:
            { agregaElemento("P_IMPORT", yytext()); return symbol(sym.P_IMPORT);
            }
            // fall through
          case 159: break;
          case 73:
            { agregaElemento("P_PUBLIC", yytext()); return symbol(sym.P_PUBLIC);
            }
            // fall through
          case 160: break;
          case 74:
            { agregaElemento("P_RETURN", yytext()); return symbol(sym.P_RETURN);
            }
            // fall through
          case 161: break;
          case 75:
            { agregaElemento("P_STATIC", yytext()); return symbol(sym.P_STATIC);
            }
            // fall through
          case 162: break;
          case 76:
            { agregaElemento("P_SWITCH", yytext()); return symbol(sym.P_SWITCH);
            }
            // fall through
          case 163: break;
          case 77:
            { agregaElemento("P_THROWS", yytext()); return symbol(sym.P_THROWS);
            }
            // fall through
          case 164: break;
          case 78:
            { agregaElemento("P_BOOLEAN", yytext()); return symbol(sym.P_BOOLEAN);
            }
            // fall through
          case 165: break;
          case 79:
            { agregaElemento("P_DEFAULT", yytext()); return symbol(sym.P_DEFAULT);
            }
            // fall through
          case 166: break;
          case 80:
            { agregaElemento("P_EXTENDS", yytext()); return symbol(sym.P_EXTENDS);
            }
            // fall through
          case 167: break;
          case 81:
            { agregaElemento("P_FINALLY", yytext()); return symbol(sym.P_FINALLY);
            }
            // fall through
          case 168: break;
          case 82:
            { agregaElemento("P_PACKAGE", yytext()); return symbol(sym.P_PACKAGE);
            }
            // fall through
          case 169: break;
          case 83:
            { agregaElemento("P_PRIVATE", yytext()); return symbol(sym.P_PRIVATE);
            }
            // fall through
          case 170: break;
          case 84:
            { agregaElemento("P_ABSTRACT", yytext()); return symbol(sym.P_ABSTRACT);
            }
            // fall through
          case 171: break;
          case 85:
            { agregaElemento("P_CONTINUE", yytext()); return symbol(sym.P_CONTINUE);
            }
            // fall through
          case 172: break;
          case 86:
            { agregaElemento("P_PROTECTED", yytext()); return symbol(sym.P_PROTECTED);
            }
            // fall through
          case 173: break;
          case 87:
            { agregaElemento("P_IMPLEMENTS", yytext()); return symbol(sym.P_IMPLEMENTS);
            }
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
