
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package DanielC_EXA_U6;

import java_cup.runtime.*;
import java.lang.reflect.Field;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\003\005\000\002\003\003\000\002\014\005\000" +
    "\002\014\003\000\002\006\013\000\002\007\003\000\002" +
    "\007\002\000\002\010\003\000\002\010\002\000\002\011" +
    "\004\000\002\011\002\000\002\012\004\000\002\012\002" +
    "\000\002\013\005\000\002\013\003\000\002\015\004\000" +
    "\002\015\002\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\004\000\002\020\007\000\002\021" +
    "\003\000\002\021\002\000\002\022\003\000\002\022\011" +
    "\000\002\023\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\002\000\002\024\005\000\002\025\005\000\002" +
    "\026\004\000\002\026\002\000\002\027\005\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\004" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\004\000\002\034\002\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\004\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\060\006" +
    "\000\002\060\005\000\002\061\003\000\002\061\005\000" +
    "\002\055\005\000\002\055\007\000\002\055\007\000\002" +
    "\057\005\000\002\056\005\000\002\053\005\000\002\053" +
    "\007\000\002\036\005\000\002\037\006\000\002\037\006" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\002\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\002\000\002\043\005\000\002" +
    "\043\004\000\002\044\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\045\005\000\002\046\006" +
    "\000\002\046\005\000\002\047\005\000\002\047\007\000" +
    "\002\047\005\000\002\050\005\000\002\050\003\000\002" +
    "\051\005\000\002\052\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\012\004\ufffd\115\ufffd\116\ufffd\117\005\001" +
    "\002\000\010\004\020\115\ufff3\116\022\001\002\000\004" +
    "\125\010\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\014\060\ufffa\101\ufffa\104\ufffa\106\ufffa" +
    "\114\ufffa\001\002\000\006\101\013\106\012\001\002\000" +
    "\010\004\ufffd\115\ufffd\116\ufffd\001\002\000\004\125\014" +
    "\001\002\000\014\060\ufffb\101\ufffb\104\ufffb\106\ufffb\114" +
    "\ufffb\001\002\000\010\004\020\115\ufff3\116\022\001\002" +
    "\000\010\004\ufffe\115\ufffe\116\ufffe\001\002\000\004\115" +
    "\030\001\002\000\004\115\ufff4\001\002\000\004\002\000" +
    "\001\002\000\004\125\010\001\002\000\004\106\027\001" +
    "\002\000\006\101\025\106\ufff8\001\002\000\006\025\026" +
    "\125\014\001\002\000\004\106\ufff9\001\002\000\010\004" +
    "\ufffc\115\ufffc\116\ufffc\001\002\000\006\111\031\125\ufff5" +
    "\001\002\000\004\125\ufff6\001\002\000\004\125\033\001" +
    "\002\000\010\060\ufff1\113\034\114\ufff1\001\002\000\004" +
    "\125\010\001\002\000\006\060\uffef\114\037\001\002\000" +
    "\004\060\044\001\002\000\004\125\010\001\002\000\004" +
    "\060\ufff0\001\002\000\010\060\uffed\101\013\104\042\001" +
    "\002\000\004\125\010\001\002\000\004\060\uffee\001\002" +
    "\000\050\004\047\005\046\006\051\007\056\010\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\021\uff9c\022\uff9c\061\uffeb\112\uff9c\115\ufff3\124\054\125" +
    "\uff9c\001\002\000\010\030\111\056\107\106\112\001\002" +
    "\000\032\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\021\uff9e\022\uff9e\112\uff9e\125\uff9e" +
    "\001\002\000\034\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\112\uffa0" +
    "\115\ufff4\125\uffa0\001\002\000\050\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\021\uffe9\022\uffe9\061\uffe9\112" +
    "\uffe9\115\uffe9\124\uffe9\125\uffe9\001\002\000\032\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\021\uff9f\022\uff9f\112\uff9f\125\uff9f\001\002\000\004" +
    "\061\105\001\002\000\032\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4" +
    "\112\062\125\uffe4\001\002\000\050\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea\061\uffea\112" +
    "\uffea\115\uffea\124\uffea\125\uffea\001\002\000\050\004\047" +
    "\005\046\006\051\007\056\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c" +
    "\061\uffeb\112\uff9c\115\ufff3\124\054\125\uff9c\001\002\000" +
    "\032\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\017\uff9d\021\uff9d\022\uff9d\112\uff9d\125\uff9d\001" +
    "\002\000\050\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\021\uffe8\022\uffe8\061\uffe8\112\uffe8\115\uffe8\124\uffe8" +
    "\125\uffe8\001\002\000\004\061\uffec\001\002\000\030\010" +
    "\063\011\070\012\064\013\066\014\067\015\075\016\065" +
    "\017\076\021\073\022\071\125\072\001\002\000\030\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\021\uffe5\022\uffe5\125\uffe5\001\002\000\010\062" +
    "\uff9b\103\uff9b\125\uff9b\001\002\000\010\062\uff99\103\uff99" +
    "\125\uff99\001\002\000\010\062\uff95\103\uff95\125\uff95\001" +
    "\002\000\010\062\uff98\103\uff98\125\uff98\001\002\000\010" +
    "\062\uff97\103\uff97\125\uff97\001\002\000\010\062\uff9a\103" +
    "\uff9a\125\uff9a\001\002\000\010\062\uff93\103\uff93\125\uff93" +
    "\001\002\000\010\062\uff91\103\uff91\125\uff91\001\002\000" +
    "\010\062\uff92\103\uff92\125\uff92\001\002\000\006\062\101" +
    "\125\uff8f\001\002\000\010\062\uff96\103\uff96\125\uff96\001" +
    "\002\000\010\062\uff94\103\uff94\125\uff94\001\002\000\004" +
    "\125\uff90\001\002\000\004\125\104\001\002\000\004\063" +
    "\102\001\002\000\006\062\101\125\uff8d\001\002\000\004" +
    "\125\uff8e\001\002\000\010\030\uffe6\056\uffe6\106\uffe6\001" +
    "\002\000\052\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\021\ufff7\022\ufff7\061\ufff7\112\ufff7\115\ufff7" +
    "\124\ufff7\125\ufff7\001\002\000\050\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\061\uffe7\112" +
    "\uffe7\115\uffe7\124\uffe7\125\uffe7\001\002\000\032\010\063" +
    "\011\070\012\064\013\066\014\067\015\075\016\065\017" +
    "\076\021\073\022\071\057\uffde\125\072\001\002\000\050" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3" +
    "\022\uffe3\061\uffe3\112\uffe3\115\uffe3\124\uffe3\125\uffe3\001" +
    "\002\000\036\050\130\051\134\052\120\053\115\054\127" +
    "\055\126\056\113\060\131\120\116\125\121\126\125\127" +
    "\132\130\133\131\124\001\002\000\054\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\022\uff8c\061\uff8c" +
    "\070\uff8c\112\uff8c\115\uff8c\123\uff8c\124\uff8c\125\uff8c\001" +
    "\002\000\032\050\130\051\134\052\120\053\115\054\127" +
    "\055\126\056\113\125\121\126\125\127\132\130\133\131" +
    "\124\001\002\000\052\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\057\uffd4\106\uffd4\001\002\000\056\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\057\uffcd\061\uffcd\104\uffcd" +
    "\106\uffcd\001\002\000\030\010\063\011\070\012\064\013" +
    "\066\014\067\015\075\016\065\017\076\021\073\022\071" +
    "\125\072\001\002\000\032\050\130\051\134\052\120\053" +
    "\115\054\127\055\126\056\113\125\121\126\125\127\132" +
    "\130\133\131\124\001\002\000\032\050\130\051\134\052" +
    "\120\053\115\054\127\055\126\056\113\125\121\126\125" +
    "\127\132\130\133\131\124\001\002\000\056\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\057\uffd3\061\uffd3\104\uffd3" +
    "\106\uffd3\001\002\000\050\023\161\024\155\025\174\026" +
    "\170\027\154\030\156\036\175\037\163\040\157\041\172" +
    "\042\165\043\153\044\171\045\173\046\167\047\152\050" +
    "\130\051\134\106\164\001\002\000\004\106\151\001\002" +
    "\000\056\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\057" +
    "\uffcf\061\uffcf\104\uffcf\106\uffcf\001\002\000\056\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\057\uffd2\061\uffd2\104" +
    "\uffd2\106\uffd2\001\002\000\056\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\057\uffcb\061\uffcb\104\uffcb\106\uffcb\001" +
    "\002\000\056\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\057\uffcc\061\uffcc\104\uffcc\106\uffcc\001\002\000\076\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\106\uffb9\125\uffb9\126" +
    "\uffb9\127\uffb9\130\uffb9\131\uffb9\001\002\000\024\053\115" +
    "\054\127\055\126\060\131\125\121\126\125\127\132\130" +
    "\133\131\124\001\002\000\056\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\057\uffd1\061\uffd1\104\uffd1\106\uffd1\001" +
    "\002\000\056\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\057\uffd0\061\uffd0\104\uffd0\106\uffd0\001\002\000\076\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\106\uffb8\125\uffb8\126" +
    "\uffb8\127\uffb8\130\uffb8\131\uffb8\001\002\000\004\106\137" +
    "\001\002\000\056\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\057\uffce\061\uffce\104\uffce\106\uffce\001\002\000\054" +
    "\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\021\uff8a" +
    "\022\uff8a\061\uff8a\070\uff8a\112\uff8a\115\uff8a\123\uff8a\124" +
    "\uff8a\125\uff8a\001\002\000\004\061\150\001\002\000\004" +
    "\061\145\001\002\000\006\061\uff81\104\143\001\002\000" +
    "\022\053\115\054\127\055\126\125\121\126\125\127\132" +
    "\130\133\131\124\001\002\000\004\061\uff82\001\002\000" +
    "\010\061\uff83\104\146\106\uff83\001\002\000\004\060\131" +
    "\001\002\000\006\061\uff84\106\uff84\001\002\000\006\061" +
    "\uff85\106\uff85\001\002\000\054\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\021\uff89\022\uff89\061\uff89\070\uff89" +
    "\112\uff89\115\uff89\123\uff89\124\uff89\125\uff89\001\002\000" +
    "\052\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\057\uffc1" +
    "\106\uffc1\001\002\000\054\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\057\uffba\106\uffba\125\uffba\001\002\000\052" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\057\uffc6\106" +
    "\uffc6\001\002\000\052\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\057\uffc9\106\uffc9\001\002\000\052\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\057\uffc5\106\uffc5\001\002" +
    "\000\054\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\057" +
    "\uffbd\106\uffbd\125\uffbd\001\002\000\052\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\057\uffd5\106\uffd5\001\002\000" +
    "\052\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\057\uffca" +
    "\106\uffca\001\002\000\052\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\057\uffd7\106\uffd7\001\002\000\054\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\057\uffbe\106\uffbe\125" +
    "\uffbe\001\002\000\054\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\021\uff8b\022\uff8b\061\uff8b\070\uff8b\112\uff8b" +
    "\115\uff8b\123\uff8b\124\uff8b\125\uff8b\001\002\000\054\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\057\uffbb\106\uffbb" +
    "\125\uffbb\001\002\000\052\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\057\uffc0\106\uffc0\001\002\000\052\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\057\uffc2\106\uffc2\001" +
    "\002\000\052\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\057\uffc7\106\uffc7\001\002\000\052\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\057\uffc4\106\uffc4\001\002\000\054" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\057\uffbc\106" +
    "\uffbc\125\uffbc\001\002\000\052\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\057\uffc3\106\uffc3\001\002\000\052\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\057\uffc8\106\uffc8" +
    "\001\002\000\054\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\057\uffbf\106\uffbf\125\uffbf\001\002\000\052\023\161" +
    "\024\155\025\174\026\170\027\154\030\156\036\175\037" +
    "\163\040\157\041\172\042\165\043\153\044\171\045\173" +
    "\046\167\047\152\050\130\051\134\057\uffd6\106\uffd6\001" +
    "\002\000\052\023\161\024\155\025\174\026\170\027\154" +
    "\030\156\036\175\037\163\040\157\041\172\042\165\043" +
    "\153\044\171\045\173\046\167\047\152\050\130\051\134" +
    "\057\uffd8\106\uffd8\001\002\000\004\062\202\001\002\000" +
    "\004\106\uff88\001\002\000\004\126\203\001\002\000\004" +
    "\063\204\001\002\000\006\062\202\106\uff86\001\002\000" +
    "\004\106\uff87\001\002\000\050\023\161\024\155\025\174" +
    "\026\170\027\154\030\156\036\175\037\163\040\157\041" +
    "\172\042\165\043\153\044\171\045\173\046\167\047\152" +
    "\050\130\051\134\057\207\001\002\000\052\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\057\uffd9\106\uffd9\001\002" +
    "\000\004\057\uffdf\001\002\000\004\057\222\001\002\000" +
    "\010\062\101\103\216\125\uff8f\001\002\000\006\057\uffe0" +
    "\104\214\001\002\000\032\010\063\011\070\012\064\013" +
    "\066\014\067\015\075\016\065\017\076\021\073\022\071" +
    "\057\uffde\125\072\001\002\000\004\057\uffe1\001\002\000" +
    "\004\125\221\001\002\000\004\125\220\001\002\000\006" +
    "\057\uffdd\104\uffdd\001\002\000\004\057\uffdc\001\002\000" +
    "\006\060\uffda\122\223\001\002\000\004\125\010\001\002" +
    "\000\004\060\225\001\002\000\040\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6" +
    "\022\uffb6\061\uffb6\070\uffb6\123\uffb6\124\uffb6\125\uffb6\001" +
    "\002\000\040\010\063\011\070\012\064\013\066\014\067" +
    "\015\075\016\065\017\076\021\073\022\071\061\240\070" +
    "\242\123\231\124\237\125\235\001\002\000\004\106\306" +
    "\001\002\000\040\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0\061\uffb0" +
    "\070\uffb0\123\uffb0\124\uffb0\125\uffb0\001\002\000\034\050" +
    "\130\051\134\052\120\053\115\054\127\055\126\056\113" +
    "\106\303\125\121\126\125\127\132\130\133\131\124\001" +
    "\002\000\004\125\301\001\002\000\040\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021" +
    "\uffb7\022\uffb7\061\uffb7\070\uffb7\123\uffb7\124\uffb7\125\uffb7" +
    "\001\002\000\040\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1\061\uffb1" +
    "\070\uffb1\123\uffb1\124\uffb1\125\uffb1\001\002\000\010\030" +
    "\265\056\264\125\uff91\001\002\000\040\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\061\uffb4\070\uffb4\123\uffb4\124\uffb4\125\uffb4" +
    "\001\002\000\040\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\061\uffb5" +
    "\070\uffb5\123\uffb5\124\uffb5\125\uffb5\001\002\000\050\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022" +
    "\uffe2\061\uffe2\112\uffe2\115\uffe2\124\uffe2\125\uffe2\001\002" +
    "\000\040\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\061\uffaf\070\uffaf" +
    "\123\uffaf\124\uffaf\125\uffaf\001\002\000\004\056\245\001" +
    "\002\000\040\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\061\uffb3\070" +
    "\uffb3\123\uffb3\124\uffb3\125\uffb3\001\002\000\004\060\255" +
    "\001\002\000\004\125\246\001\002\000\016\036\175\037" +
    "\163\040\157\041\172\042\165\043\153\001\002\000\004" +
    "\057\250\001\002\000\004\060\uffa7\001\002\000\004\125" +
    "\252\001\002\000\006\044\253\057\uffa5\001\002\000\004" +
    "\125\246\001\002\000\004\057\uffa4\001\002\000\040\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\021\uffb6\022\uffb6\061\uffb6\070\uffb6\123\uffb6\124" +
    "\uffb6\125\uffb6\001\002\000\042\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\022" +
    "\uffaa\061\uffaa\070\uffaa\071\257\123\uffaa\124\uffaa\125\uffaa" +
    "\001\002\000\006\060\255\070\242\001\002\000\040\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\021\uffa9\022\uffa9\061\uffa9\070\uffa9\123\uffa9\124" +
    "\uffa9\125\uffa9\001\002\000\040\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8\022" +
    "\uffa8\061\uffa8\070\uffa8\123\uffa8\124\uffa8\125\uffa8\001\002" +
    "\000\040\010\063\011\070\012\064\013\066\014\067\015" +
    "\075\016\065\017\076\021\073\022\071\061\263\070\242" +
    "\123\231\124\237\125\235\001\002\000\042\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\021\uffa6\022\uffa6\061\uffa6\070\uffa6\071\uffa6\123\uffa6\124" +
    "\uffa6\125\uffa6\001\002\000\006\057\275\125\273\001\002" +
    "\000\032\050\130\051\134\052\120\053\115\054\127\055" +
    "\126\056\113\125\267\126\125\127\132\130\133\131\124" +
    "\001\002\000\004\106\272\001\002\000\052\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\056\264\106\uffd3\001\002" +
    "\000\050\023\161\024\155\025\174\026\170\027\154\030" +
    "\156\036\175\037\163\040\157\041\172\042\165\043\153" +
    "\044\171\045\173\046\167\047\152\050\130\051\134\106" +
    "\271\001\002\000\040\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\061" +
    "\uffa2\070\uffa2\123\uffa2\124\uffa2\125\uffa2\001\002\000\040" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\021\uffa1\022\uffa1\061\uffa1\070\uffa1\123\uffa1" +
    "\124\uffa1\125\uffa1\001\002\000\006\057\uffac\104\277\001" +
    "\002\000\004\057\276\001\002\000\004\106\uffad\001\002" +
    "\000\004\106\uffae\001\002\000\004\125\273\001\002\000" +
    "\004\057\uffab\001\002\000\006\030\111\106\112\001\002" +
    "\000\040\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\061\uffa3\070\uffa3" +
    "\123\uffa3\124\uffa3\125\uffa3\001\002\000\040\010\uff7f\011" +
    "\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f" +
    "\021\uff7f\022\uff7f\061\uff7f\070\uff7f\123\uff7f\124\uff7f\125" +
    "\uff7f\001\002\000\050\023\161\024\155\025\174\026\170" +
    "\027\154\030\156\036\175\037\163\040\157\041\172\042" +
    "\165\043\153\044\171\045\173\046\167\047\152\050\130" +
    "\051\134\106\305\001\002\000\040\010\uff80\011\uff80\012" +
    "\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\021\uff80" +
    "\022\uff80\061\uff80\070\uff80\123\uff80\124\uff80\125\uff80\001" +
    "\002\000\040\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\061\uffb2\070" +
    "\uffb2\123\uffb2\124\uffb2\125\uffb2\001\002\000\006\060\uffdb" +
    "\101\013\001\002\000\010\060\ufff2\101\013\114\ufff2\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\002\005\004\003\001\001\000\010\005" +
    "\015\006\310\010\016\001\001\000\004\003\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\015\006\020\010\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\023\014\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\034\001\001" +
    "\000\004\003\307\001\001\000\004\012\035\001\001\000" +
    "\002\001\001\000\006\003\040\013\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\040\013\042\001" +
    "\001\000\002\001\001\000\020\006\056\010\016\015\051" +
    "\016\054\017\047\020\044\040\052\001\001\000\006\022" +
    "\105\044\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\060\001\001\000\002\001\001\000\020\006\056" +
    "\010\016\015\057\016\054\017\047\020\044\040\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\077\043\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\210\024\212\025\207" +
    "\041\211\001\001\000\002\001\001\000\016\027\121\030" +
    "\113\031\135\033\116\045\122\047\134\001\001\000\002" +
    "\001\001\000\012\027\205\030\113\031\135\033\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\177" +
    "\001\001\000\012\027\176\030\113\031\135\033\116\001" +
    "\001\000\012\027\175\030\113\031\135\033\116\001\001" +
    "\000\002\001\001\000\010\032\157\033\161\054\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\030\141\031\135\047\137\050\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\141\031" +
    "\135\050\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\157\033\161" +
    "\054\165\001\001\000\010\032\157\033\161\054\165\001" +
    "\001\000\004\046\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\204\001\001\000" +
    "\002\001\001\000\010\032\157\033\161\054\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\216\043\076\001\001\000\002\001\001\000\012" +
    "\023\214\024\212\025\207\041\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\223\001\001\000\004\003" +
    "\306\001\001\000\002\001\001\000\004\034\225\001\001" +
    "\000\022\035\232\036\235\037\242\041\231\051\233\052" +
    "\227\055\240\060\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\303\030\113\031\135\033\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\243\001\001" +
    "\000\002\001\001\000\004\056\255\001\001\000\004\053" +
    "\246\001\001\000\004\054\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\253\001\001\000\002\001\001\000\004\034\261" +
    "\001\001\000\002\001\001\000\006\055\257\056\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\035\232" +
    "\036\235\037\242\041\231\051\233\052\227\055\240\060" +
    "\226\001\001\000\002\001\001\000\004\061\273\001\001" +
    "\000\014\027\267\030\113\031\135\033\116\060\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\157" +
    "\033\161\054\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\277\001\001\000\002\001" +
    "\001\000\004\044\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\157\033\161\054\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    String error = null;
    public ArrayList<Deteccion> detecciones = new ArrayList<>();
    private HashMap<String, String> mapa = new HashMap<>();
    //Throws the exception after being generated on syntax_error
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        throw new Exception(error);
    }
    //Generates the error message
    public void syntax_error(Symbol s) {
        //report_error("Error de sintaxis en linea " + s.left, null);
        StringBuilder exceptionMessage = new StringBuilder();
        //Se le tiene que insistir un poquito para que actualice los tokens esperados
        report_expected_token_ids();
        report_expected_token_ids();
        List<Integer> expectedTokens=expected_token_ids();
        
        int line = ((Lexer)(getScanner())).getyyline();
        int column = ((Lexer)(getScanner())).getyycolumn();
        exceptionMessage.append(String.format("Error sintáctico.\nEn linea %d, columna %d se esperaba algún [", (line+1), (column+1)));
        int expectedTokensCount=0;
        for(int expectedTokenVal : expectedTokens){
            String token = getTokenName(expectedTokenVal);
            if(expectedTokensCount++>0) exceptionMessage.append(",");
            exceptionMessage.append(token);
        }
        exceptionMessage.append("]");
        error = exceptionMessage.toString();
    }
    //Gets a symbol name given its value
    private String getTokenName(int expectedToken){
        for(Field field : sym.class.getDeclaredFields()){
            try{
                int fieldVal=field.getInt(field);
                if(expectedToken==fieldVal) return field.getName();
            }
            catch(Exception e){}
        }
        return "";
    }
    private void agregaAMapa(String key, String val){
        mapa.put(key, val);
    }
    private void detecta(String token, String lexema, int linea){
        detecciones.add(new Deteccion(token, lexema, linea+1));
    }
    private String getKey(String key){
        return mapa.getOrDefault(key, "0");
    }
    private void detectaGlobal(String e, String id, int eleft){
        if(e!=null) detecta("Variable global", id, eleft); 
        else {
            //Permite métodos a menos que se acerquen a la firma del main
            //La única falla es que basta que el último parámetro sea String[]
            if(getKey("modif").equals("public") &&
                    getKey("static").equals("1") &&
                    getKey("td").equals("void") &&
                    getKey("nombre").equals("main") &&
                    getKey("tdparam").equals("String") &&
                    getKey("tdparamarr").equals("1")){
            }
            else{
                detecta("Método", id, eleft);
            }
            mapa.clear();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JAVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JAVA ::= P_PACKAGE IDEXT CE RIMPORT CLASS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JAVA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // JAVA ::= RIMPORT CLASS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JAVA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RIMPORT ::= RIMPORT IMPORT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RIMPORT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RIMPORT ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RIMPORT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORT ::= P_IMPORT IDEEXT CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDEXT ::= IDEXT UPT ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDEXT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDEXT ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDEXT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDEEXT ::= IDEXT UPT OP_MUL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDEEXT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDEEXT ::= IDEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDEEXT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS ::= CMODA P_CLASS ABST ID EXTENDS IMPLE AG_LLA BODY AG_LLC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		detecta("Clase", id, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ABST ::= P_ABSTRACT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ABST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ABST ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ABST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CMODA ::= P_PUBLIC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMODA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CMODA ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMODA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXTENDS ::= P_EXTENDS IDEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXTENDS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXTENDS ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXTENDS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPLE ::= P_IMPLEMENTS IMIDEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPLE ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMIDEXT ::= IDEXT CM IMIDEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMIDEXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IMIDEXT ::= IDEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMIDEXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BODY ::= CINS BODY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BODY",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BODY ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BODY",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CINS ::= COMENT 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		detecta("Comentario", c, cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CINS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CINS ::= GDEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CINS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CINS ::= CLASS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CINS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GDEC ::= FIRMA ENDEC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		agregaAMapa("nombre", id); detectaGlobal(e, id, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GDEC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FIRMA ::= MODA STATE TD DIM ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIRMA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATE ::= P_STATIC 
            {
              String RESULT =null;
		agregaAMapa("static", "1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATE ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ENDEC ::= FIND 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENDEC",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ENDEC ::= AG_PA LPARAM AG_PC THROWS AG_LLA LINS AG_LLC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENDEC",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LPARAM ::= PARAM CM LPARAM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LPARAM ::= PARAM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LPARAM ::= PARAMV 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LPARAM ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAM ::= TD DIM ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMV ::= TD TPT ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMV",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // THROWS ::= P_THROWS IDEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("THROWS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // THROWS ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("THROWS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= AG_PA EXP AG_PC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= OPUN EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP OPUN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= OPU_NEG EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP OP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= VAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VAL ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VAL ::= VN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VAL ::= VD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAL ::= VC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VAL ::= VS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VAL ::= PRES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRES ::= P_NULL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRES ::= P_TRUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRES ::= P_FALSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP ::= OP_SUM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP ::= OP_RES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP ::= OP_MUL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP ::= OP_DIV 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP ::= OP_MOD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP ::= OP_ASIG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP ::= OPL_AND 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP ::= OPL_OR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP ::= OPL_ANDSIMP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP ::= OPL_ORSIMP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP ::= BOOL_OP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BOOL_OP ::= OPR_IG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOL_OP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOOL_OP ::= OPR_DIF 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOL_OP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BOOL_OP ::= OPR_MAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOL_OP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BOOL_OP ::= OPR_MEN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOL_OP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BOOL_OP ::= OPR_MAYIG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOL_OP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BOOL_OP ::= OPR_MENIG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOL_OP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPUN ::= OPU_INC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPUN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPUN ::= OPU_DEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPUN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LINS ::= LINS INS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LINS ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INS ::= COMENT 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		detecta("Comentario", c, cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INS ::= DEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INS ::= ASIG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INS ::= METH_CALL CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INS ::= RETURN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INS ::= RETURNV 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INS ::= IF_INST 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		detecta("IF", "if", idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // METH_CALL ::= ID AG_PA METH_PARAM AG_PC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METH_CALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // METH_CALL ::= ID AG_PA AG_PC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METH_CALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // METH_PARAM ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METH_PARAM",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // METH_PARAM ::= ID CM METH_PARAM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METH_PARAM",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF_INST ::= P_IF IF_COMP IF_BODY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_INST",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF_INST ::= P_IF IF_COMP IF_BODY P_ELSE IF_INST 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_INST",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF_INST ::= P_IF IF_COMP IF_BODY P_ELSE IF_BODY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_INST",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF_COMP ::= AG_PA COND AG_PC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_COMP",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF_BODY ::= AG_LLA LINS AG_LLC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_BODY",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= ID BOOL_OP ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= ID BOOL_OP ID OPL_AND COND 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DEC ::= TD ID FIND 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ASIG ::= ID OP_ASIG EXP CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIG ::= ID OP_ASIG METH_CALL CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MODA ::= P_PUBLIC 
            {
              String RESULT =null;
		agregaAMapa("modif", "public");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MODA ::= P_PROTECTED 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MODA ::= P_PRIVATE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MODA ::= P_DEFAULT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MODA ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TD ::= P_BYTE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TD ::= P_SHORT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TD ::= P_INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TD ::= P_LONG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TD ::= P_FLOAT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TD ::= P_DOUBLE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TD ::= P_CHAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TD ::= P_BOOLEAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TD ::= P_STRING 
            {
              String RESULT =null;
		agregaAMapa("tdparam", "String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TD ::= P_VOID 
            {
              String RESULT =null;
		agregaAMapa("td", "void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TD ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DIM ::= DIMS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DIM ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DIMS ::= AG_CA AG_CC DIMS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DIMS ::= AG_CA AG_CC 
            {
              String RESULT =null;
		agregaAMapa("tdparamarr", "1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FIND ::= CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FIND ::= OP_ASIG EXP CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FIND ::= OP_ASIG ARRAY CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FIND ::= OP_ASIG INSTANCE CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTANCE ::= P_NEW TD DIMNUM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DIMNUM ::= AG_CA VN AG_CC DIMNUM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMNUM",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DIMNUM ::= AG_CA VN AG_CC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMNUM",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARRAY ::= AG_LLA ARRAY AG_LLC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARRAY ::= AG_LLA LIST AG_LLC CM ARRAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARRAY ::= AG_LLA LIST AG_LLC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LIST ::= VAL CM LIST 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LIST ::= VAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // RETURN ::= P_RETURN EXP CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // RETURNV ::= P_RETURN CE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNV",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
